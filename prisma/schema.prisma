generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

  model Users {
    id            String   @id @default(uuid()) @db.Uuid
    username      String   @unique
    password      String   
    email         String?  @db.VarChar(150)
    f_name        String   @db.VarChar(50)
    m_name        String?  @db.VarChar(50)
    l_name        String?  @db.VarChar(50)
    phone         String   @db.VarChar(20)
    landline      String?  @db.VarChar(20) @default("")
    alt_landline  String?  @db.VarChar(20) @default("")
    alt_phone     String?  @db.VarChar(20) @default("")
    designation   String?   @db.VarChar(50) @default("")
    city          String?  @default("")
    zip_code      String?  @default("")
    state         String?  @default("")
    country       String?  @default("")
    address       String?  @default("")
    role          UserRole
    emp_code      String?   @default("WBT")
    department    Json?    @default("{}")
    is_sales      Boolean? @default(false)
    is_manager    Boolean @default(false)
    is_active     Boolean  @default(true) 
    is_staff      Boolean  @default(false)
    is_superuser  Boolean  @default(false)
    is_firstLogin Boolean  @default(true)

    fabricator    Fabricator? @relation("UserFabricator", fields: [fabricatorId], references: [id])
    fabricatorId  String?     @db.Uuid @unique // Make fabricatorId unique for a one-to-one relation

    fabricators   Fabricator[] @relation("FabricatorUsers") // Relation for multiple fabricators

    managedDepartments Department[] @relation("Manager") // Departments where the user is a manager
    createdDepartments Department[] @relation("Creator") // Departments created by the user

    teamManager Team[] @relation("TeamManager")

    createdFabricators Fabricator[] @relation("FabricatorCreatedBy") // Opposite relation for createdBy

    project Project[] @relation("projectManager")

    tasks Task[] @relation("userTask")
    
    assignedByUser Assigned_list[] @relation("assignedByUser")
    assignedToUser Assigned_list[] @relation("assignedToUser")
    approvedByUser Assigned_list[] @relation("approvedByUser")

    accepttasks AcceptTask[] @relation("acceptTaskUser")

    taskcommentuser Comment[] @relation("taskcommentuser")


    @@map("users")
  }

model Fabricator {
  id          String   @id @default(uuid()) @db.Uuid
  createdById String   @db.Uuid
  createdBy   Users    @relation("FabricatorCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  fabName     String   @default("")
  headquaters Json     @default("{}")
  website     String   @default("")
  drive       String   @default("")
  branches    Json     @default("[]")
  files       String[] @default([])
  is_bin      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       Users[] @relation("FabricatorUsers") // Relation for multiple users
  singleUser  Users?  @relation("UserFabricator") // Opposite relation for fabricator in Users

  project    Project[] @relation("projectFabricator")
  tasks Task[] @relation("fabricatorTask")
  accepttasks AcceptTask[] @relation("acceptTaskFabricator")

  @@map("fabricators")
}


model Department {
  id         String   @id @default(uuid()) @db.Uuid
  name       String   @unique
  managerId  String?  @db.Uuid // Foreign key to the Users model (UUID)
  manager    Users?   @relation(fields: [managerId], references: [id], name: "Manager", onDelete: Cascade)
  createdById String? @db.Uuid // Foreign key to the Users model (UUID)
  createdBy  Users?   @relation(fields: [createdById], references: [id], name: "Creator", onDelete: Cascade)
  isBin      Boolean  @default(false)

  project Project[] @relation("projectDepartment")

  @@map("department") // Optional: Matches the Django table name
}



model Team {
  id  String @id @default(uuid()) @db.Uuid
  name  String @unique
  managerID String @db.Uuid 
  manager  Users @relation(fields: [managerID], references: [id], name: "TeamManager", onDelete: Cascade)
  members Json @default("[]")

  project Project[] @relation("projectTeam")

  @@map("team")
}

  model Project {
    id String @id @default(uuid()) @db.Uuid
    name String @unique
    description String 
    fabricatorID String @db.Uuid
  fabricator  Fabricator @relation(fields: [fabricatorID], references: [id], name: "projectFabricator", onDelete: Cascade)
  departmentID String @db.Uuid
  department   Department @relation(fields: [departmentID], references: [id], name: "projectDepartment", onDelete: Cascade)
  teamID String @db.Uuid
  team Team @relation(fields: [teamID], references: [id], name: "projectTeam", onDelete: Cascade)
  managerID  String @db.Uuid
  manager Users @relation(fields: [managerID], references: [id], name: "projectManager", onDelete: Cascade)
  status Status @default(ACTIVE)
  stage Stage @default(RFI)
  tools Tools @default(TEKLA) // Not sure about the default value
  files Json @default("[]")
  connectionDesign Boolean @default(true) // Not sure about the default value
  miscDesign Boolean @default(true) // Not sure about the default value
  customerDesign Boolean @default(false) // Not sure about the default value
  startDate DateTime @default(now()) // Not sure about the default value
  approvalDate DateTime @default(now()) // Not sure about the default value
  estimatedHours Int 
  tasks Task[] @relation("projectTask")
  accepttasks AcceptTask[] @relation("acceptTaskProject")

  @@map("project")
} 

model Task {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  description String
  status      String   
  attachment  String
  priority    Int
  created_on  DateTime  @default(now())
  due_date    DateTime
  duration    String
  project_id String @db.Uuid
  project Project @relation(fields: [project_id], references: [id], name: "projectTask", onDelete: Cascade)
  fabricator_id String @db.Uuid
  fabricator Fabricator @relation(fields: [fabricator_id], references: [id], name: "fabricatorTask", onDelete: Cascade)
  user_id String @db.Uuid
  user Users @relation(fields: [user_id], references: [id], name: "userTask", onDelete: Cascade)

  assignedTask Assigned_list[] @relation("assignedTask")
  taskcomment Comment[] @relation("taskcomment")
  @@map("task")
}


model AcceptTask{
  id String @id @default(uuid()) @db.Uuid
  name String
  description String
  satus String
  attachment String
  priority Int
  created_on DateTime @default(now())
  due_date DateTime
  duration String
  project_id String @db.Uuid
  project Project @relation(fields: [project_id],references: [id],name: "acceptTaskProject",onDelete: Cascade)
  fabricator_id String @db.Uuid
  fabricator Fabricator @relation(fields: [fabricator_id],references: [id],name: "acceptTaskFabricator",onDelete: Cascade)
  user_id String @db.Uuid
  user Users @relation(fields: [user_id],references: [id],name: "acceptTaskUser",onDelete: Cascade)

  @@map("accepttask")
}



model Assigned_list {
 id String @id @default(uuid()) @db.Uuid
 approved_on DateTime @default(now())
 assigned_on DateTime @default(now())
 approved Boolean @default(false) //not sure about the default value
 comment String
  task_id String  @db.Uuid
 task  Task @relation(fields: [task_id],references: [id],name: "assignedTask",onDelete: Cascade)
  assigned_by String @db.Uuid
  users Users @relation(fields: [assigned_by], references: [id], onDelete: Cascade, name: "assignedByUser")
  assigned_to String @db.Uuid
  user Users @relation(fields: [assigned_to], references: [id], onDelete: Cascade, name: "assignedToUser")
  approved_by String @db.Uuid
  userss Users @relation(fields: [approved_by] , references: [id], onDelete: Cascade, name: "approvedByUser")

  @@map("assignedlist")
}
model Comment{
  id String @id @default(uuid()) @db.Uuid
  created_on DateTime @default(now())
  data String
  file String
  task_id String @db.Uuid
  task Task @relation(fields: [task_id],references: [id],name: "taskcomment",onDelete: Cascade)
  user_id String @db.Uuid
  user Users @relation(fields: [user_id],references: [id],name: "taskcommentuser",onDelete: Cascade)

  @@map("comment")

}

enum UserRole {
  STAFF
  CLIENT
  VENDOR
  
}

enum Status {
  ACTIVE
  ON_HOLD
  INACTIVE
  DELAY
  COMPLETE
}

enum Stage {
  RFI
  IFA
  BFA
  BFA_M // Not possible to use "-"
  RIFA
  RBFA
  IFC
  BFC
  RJFC
  REV
  CO // Not possible to use "#"
}

enum Tools {
  TEKLA
  SDS2
}