generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

model Users {
  id                    String          @id @default(uuid()) @db.Uuid
  username              String          @unique
  password              String
  email                 String?         @db.VarChar(150)
  f_name                String          @db.VarChar(50)
  m_name                String?         @db.VarChar(50)
  l_name                String?         @db.VarChar(50)
  phone                 String          @db.VarChar(20)
  landline              String?         @default("") @db.VarChar(20)
  alt_landline          String?         @default("") @db.VarChar(20)
  alt_phone             String?         @default("") @db.VarChar(20)
  designation           String?         @default("") @db.VarChar(50)
  city                  String?         @default("")
  zip_code              String?         @default("")
  state                 String?         @default("")
  country               String?         @default("")
  address               String?         @default("")
  role                  UserRole
  emp_code              String?         @default("WBT")
  is_sales              Boolean?        @default(false)
  is_manager            Boolean         @default(false)
  is_active             Boolean         @default(true)
  is_staff              Boolean         @default(false)
  is_superuser          Boolean         @default(false)
  is_firstLogin         Boolean         @default(true)
  fabricatorId          String?         @db.Uuid
  department            String?         @db.Uuid
  is_deptmanager        Boolean         @default(false)
  is_hr                 Boolean         @default(false)
  accepttasks           AcceptTask[]    @relation("acceptTaskUser")
  taskApprovedBy        Assigned_list[] @relation("taskApprovedBy")
  taskAssignedby        Assigned_list[] @relation("taskAssignedby")
  assignedToUsers       Assigned_list[] @relation("assignedToUsers")
  approvedByUser        Assignes[]      @relation("approvedByUser")
  assignedByUser        Assignes[]      @relation("assignedByUser")
  assignedToUser        Assignes[]      @relation("assignedToUser")
  changeorderRecipients ChangeOrder[]   @relation("ChangeOrderRecipients")
  changeorderSender     ChangeOrder[]   @relation("ChangeOrderSender")
  taskcommentuser       Comment[]       @relation("taskcommentuser")
  approvedByConfirm     Confirm[]       @relation("approvedByUserConfirm")
  assignedByConfirm     Confirm[]       @relation("assignedByUserConfirm")
  assignedToConfirm     Confirm[]       @relation("assignedToUserConfirm")
  createdDepartments    Department[]    @relation("Creator")
  managedDepartments    Department[]    @relation("Manager")
  createdFabricators    Fabricator[]    @relation("FabricatorCreatedBy")
  groupAdmin            Group[]         @relation("groupAdmin")
  groupMembers          GroupUser[]     @relation("groupMembers")
  messageReceivedBy     Message[]       @relation("messageReceivedBy")
  messageSentBy         Message[]       @relation("messageSentBy")
  notification          Notification[]  @relation("Notification")
  project               Project[]       @relation("projectManager")
  rfiRecepients         RFI[]           @relation("UsersRFI")
  rfisender             RFI[]           @relation("senderRFI")
  UsersRFQ              RFQ[]           @relation("UsersRFQ")
  senderRFQ             RFQ[]           @relation("senderRFQ")
  submittalRecepients   Submittals[]    @relation("UsersSubmittals")
  submittalsender       Submittals[]    @relation("senderSubmittals")
  tasks                 Task[]          @relation("userTask")
  teamManager           Team[]          @relation("TeamManager")
  departmentId          Department?     @relation("userDepartment", fields: [department], references: [id], onDelete: Cascade)
  fabricator            Fabricator?     @relation("UsersFabricator", fields: [fabricatorId], references: [id])
  workingHourUser       WorkingHours[]  @relation("workingHourUser")
  fabricators           Fabricator[]    @relation("FabricatorUsers")
  taggedInMessages      Message[]       @relation("TaggedUsers")
  COrespondedby         COResponse[]    @relation("COrespondedby")
  rfiresponseBy         RFIResponse[]   @relation("rfiresponseBy")
  rfqresponseBy         RFQResponse[]   @relation("rfqresponseBy")
  submittalsresponseBy  SubmittalsdResponse[]  @relation("submittalsresponseBy")

  @@map("users")
}

model Fabricator {
  id          String       @id @default(uuid()) @db.Uuid
  createdById String       @db.Uuid
  fabName     String       @default("")
  headquaters Json         @default("{}")
  website     String?      @default("")
  drive       String?      @default("")
  branches    Json         @default("[]")
  is_bin      Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  files       Json         @default("[]")
  accepttasks AcceptTask[] @relation("acceptTaskFabricator")
  createdBy   Users        @relation("FabricatorCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  project     Project[]    @relation("projectFabricator")
  rfi         RFI[]        @relation("FabricatorRFI")
  submittals  Submittals[] @relation("FabricatorSubmittals")
  userss      Users[]      @relation("UsersFabricator")
  users       Users[]      @relation("FabricatorUsers")

  @@map("fabricators")
}

model Department {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique
  managerId   String?   @db.Uuid
  createdById String?   @db.Uuid
  isBin       Boolean   @default(false)
  createdBy   Users?    @relation("Creator", fields: [createdById], references: [id])
  manager     Users?    @relation("Manager", fields: [managerId], references: [id])
  project     Project[] @relation("projectDepartment")
  users       Users[]   @relation("userDepartment")

  @@map("department")
}

model Team {
  id        String    @id @default(uuid()) @db.Uuid
  name      String    @unique
  managerID String    @db.Uuid
  members   Json      @default("[]")
  project   Project[] @relation("projectTeam")
  manager   Users     @relation("TeamManager", fields: [managerID], references: [id], onDelete: Cascade)

  @@map("team")
}

model Project {
  id               String        @id @default(uuid()) @db.Uuid
  name             String        @unique
  description      String
  fabricatorID     String        @db.Uuid
  departmentID     String        @db.Uuid
  teamID           String?       @db.Uuid
  managerID        String        @db.Uuid
  status           Status        @default(ACTIVE)
  stage            Stage         @default(RFI)
  tools            Tools         @default(TEKLA)
  files            Json          @default("[]")
  connectionDesign Boolean       @default(true)
  miscDesign       Boolean       @default(true)
  customerDesign   Boolean       @default(false)
  startDate        String
  endDate          String?
  approvalDate     String
  estimatedHours   Int
  accepttasks      AcceptTask[]  @relation("acceptTaskProject")
  changeOrder      ChangeOrder[] @relation("ChangeOrderProject")
  Jobstudy         JobStudy[]    @relation("projectJobStudy")
  department       Department    @relation("projectDepartment", fields: [departmentID], references: [id], onDelete: Cascade)
  fabricator       Fabricator    @relation("projectFabricator", fields: [fabricatorID], references: [id], onDelete: Cascade)
  manager          Users         @relation("projectManager", fields: [managerID], references: [id], onDelete: Cascade)
  team             Team?         @relation("projectTeam", fields: [teamID], references: [id], onDelete: Cascade)
  rfi              RFI[]         @relation("ProjectRFI")
  subTasks         SubTasks[]    @relation("subTasks")
  submittals       Submittals[]  @relation("ProjectSubmittals")
  tasks            Task[]        @relation("projectTask")

  @@map("project")
}

model Task {
  id                 String          @id @default(uuid()) @db.Uuid
  name               String
  description        String
  status             String
  priority           Int
  created_on         DateTime        @default(now())
  due_date           String
  duration           String
  project_id         String          @db.Uuid
  user_id            String          @db.Uuid
  start_date         String
  taskInAssignedList Assigned_list[] @relation("taskInAssignedList")
  assignedTask       Assignes[]      @relation("assignedTask")
  taskcomment        Comment[]       @relation("taskcomment")
  project            Project         @relation("projectTask", fields: [project_id], references: [id], onDelete: Cascade)
  user               Users           @relation("userTask", fields: [user_id], references: [id], onDelete: Cascade)
  workingHourTask    WorkingHours[]  @relation("workingHourTask")

  @@map("task")
}

model AcceptTask {
  id            String     @id @default(uuid()) @db.Uuid
  name          String
  description   String
  satus         String
  attachment    String
  priority      Int
  created_on    DateTime   @default(now())
  due_date      DateTime
  duration      String
  project_id    String     @db.Uuid
  fabricator_id String     @db.Uuid
  user_id       String     @db.Uuid
  fabricator    Fabricator @relation("acceptTaskFabricator", fields: [fabricator_id], references: [id], onDelete: Cascade)
  project       Project    @relation("acceptTaskProject", fields: [project_id], references: [id], onDelete: Cascade)
  user          Users      @relation("acceptTaskUser", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("accepttask")
}

model Assigned_list {
  id          String    @id @default(uuid()) @db.Uuid
  approved_on DateTime?
  assigned_on DateTime  @default(now())
  approved    Boolean
  comment     String    @default(" ")
  task_id     String    @db.Uuid
  assigned_by String    @db.Uuid
  approved_by String?   @db.Uuid
  assigned_to String    @db.Uuid
  user        Users?    @relation("taskApprovedBy", fields: [approved_by], references: [id], onDelete: Cascade)
  users       Users     @relation("taskAssignedby", fields: [assigned_by], references: [id], onDelete: Cascade)
  userss      Users     @relation("assignedToUsers", fields: [assigned_to], references: [id], onDelete: Cascade)
  task        Task      @relation("taskInAssignedList", fields: [task_id], references: [id], onDelete: Cascade)
  confirm     Confirm[] @relation("assignedTaskConfirm")

  @@map("assigendlist")
}

model Assignes {
  id          String   @id @default(uuid()) @db.Uuid
  approved_on DateTime @default(now())
  assigned_on DateTime @default(now())
  approved    Boolean  @default(true)
  comment     String   @default("")
  task_id     String   @db.Uuid
  assigned_by String   @db.Uuid
  assigned_to String   @db.Uuid
  approved_by String?  @db.Uuid
  userss      Users?   @relation("approvedByUser", fields: [approved_by], references: [id], onDelete: Cascade)
  users       Users    @relation("assignedByUser", fields: [assigned_by], references: [id], onDelete: Cascade)
  user        Users    @relation("assignedToUser", fields: [assigned_to], references: [id], onDelete: Cascade)
  task        Task     @relation("assignedTask", fields: [task_id], references: [id], onDelete: Cascade)

  @@map("assignes")
}

model Confirm {
  id               String        @id @default(uuid()) @db.Uuid
  approved_on      DateTime      @default(now())
  assigned_on      DateTime      @default(now())
  approved         Boolean       @default(false)
  comment          String
  assigned_task_id String        @db.Uuid
  assigned_by      String        @db.Uuid
  assigned_to      String        @db.Uuid
  approved_by      String        @db.Uuid
  userss           Users         @relation("approvedByUserConfirm", fields: [approved_by], references: [id], onDelete: Cascade)
  users            Users         @relation("assignedByUserConfirm", fields: [assigned_by], references: [id], onDelete: Cascade)
  task             Assigned_list @relation("assignedTaskConfirm", fields: [assigned_task_id], references: [id], onDelete: Cascade)
  user             Users         @relation("assignedToUserConfirm", fields: [assigned_to], references: [id], onDelete: Cascade)

  @@map("confirm")
}

model Comment {
  id         String   @id @default(uuid()) @db.Uuid
  created_on DateTime @default(now())
  data       String
  task_id    String   @db.Uuid
  user_id    String   @db.Uuid
  file       Json     @default("[]")
  task       Task     @relation("taskcomment", fields: [task_id], references: [id], onDelete: Cascade)
  user       Users    @relation("taskcommentuser", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("comment")
}

model Submittals {
  id            String     @id @default(uuid()) @db.Uuid
  fabricator_id String     @db.Uuid
  date          DateTime   @default(now())
  project_id    String     @db.Uuid
  recepient_id  String     @db.Uuid
  sender_id     String     @db.Uuid
  status        Boolean    @default(false)
  subject       String
  description   String
  files         Json[]     @default([])
  fabricator    Fabricator @relation("FabricatorSubmittals", fields: [fabricator_id], references: [id], onDelete: Cascade)
  project       Project    @relation("ProjectSubmittals", fields: [project_id], references: [id], onDelete: Cascade)
  recepients    Users      @relation("UsersSubmittals", fields: [recepient_id], references: [id], onDelete: Cascade)
  sender        Users      @relation("senderSubmittals", fields: [sender_id], references: [id], onDelete: Cascade)
  submittalsResponse  SubmittalsdResponse?  @relation("submittalsresponse")

  @@map("submittals")
}

model SubmittalsdResponse {
  id            String   @id @default(uuid()) @db.Uuid
  files         Json[]   @default([])
  reason        String   @default("")
  respondedAt   String   @default("")
  createdAt     DateTime @default(now())
  approved      Boolean   @default(false)
  userId        String    @db.Uuid
  user          Users     @relation("submittalsresponseBy",fields:[userId],references:[id])
  submittalsId    String   @unique @db.Uuid
  submittals    Submittals    @relation("submittalsresponse", fields: [submittalsId], references: [id])

  @@map("submittalsresponse")
}

model RFI {
  id            String       @id @default(uuid()) @db.Uuid
  fabricator_id String       @db.Uuid
  date          DateTime     @default(now())
  project_id    String       @db.Uuid
  recepient_id  String       @db.Uuid
  sender_id     String       @db.Uuid
  status        Boolean      @default(false)
  subject       String
  description   String
  files         Json[]       @default([])
  fabricator    Fabricator   @relation("FabricatorRFI", fields: [fabricator_id], references: [id], onDelete: Cascade)
  project       Project      @relation("ProjectRFI", fields: [project_id], references: [id], onDelete: Cascade)
  recepients    Users        @relation("UsersRFI", fields: [recepient_id], references: [id], onDelete: Cascade)
  sender        Users        @relation("senderRFI", fields: [sender_id], references: [id], onDelete: Cascade)
  rfiresponse   RFIResponse? @relation("rfiresponse")

  @@map("rfi")
}

model RFIResponse {
  id            String   @id @default(uuid()) @db.Uuid
  files         Json[]   @default([])
  responseState State
  reason        String   @default("")
  respondedAt   String   @default("")
  userId        String    @db.Uuid
  user          Users     @relation("rfiresponseBy",fields:[userId],references:[id])
  createdAt     DateTime @default(now())
  rfiId         String   @unique @db.Uuid
  rfi           RFI      @relation("rfiresponse", fields: [rfiId], references: [id], onDelete: Cascade)

  @@map("rfiresponse")
}

model RFQ {
  id           String   @id @default(uuid()) @db.Uuid
  projectName  String
  sender_id    String   @db.Uuid
  status       Boolean  @default(false)
  subject      String
  description  String
  files        Json[]   @default([])
  date         DateTime @default(now())
  recepient_id String   @db.Uuid
  recepients   Users    @relation("UsersRFQ", fields: [recepient_id], references: [id])
  sender       Users    @relation("senderRFQ", fields: [sender_id], references: [id])
  response     RFQResponse?  @relation("rfqResponses")
  @@map("rfq")
}

model RFQResponse{
  id        String    @id @default(uuid()) @db.Uuid
  files     Json[]    @default([])
  userId        String    @db.Uuid
  user          Users     @relation("rfqresponseBy",fields:[userId],references:[id])
  rfqId     String    @db.Uuid  @unique
  rfqResponses  RFQ   @relation("rfqResponses",fields:[rfqId],references:[id])

  @@map("rfqResponse")
}

model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  userID    String   @db.Uuid
  payload   Json
  delivered Boolean  @default(false)
  user      Users    @relation("Notification", fields: [userID], references: [id], onDelete: Cascade)

  @@map("notification")
}

model WorkingHours {
  id       String         @id @default(uuid()) @db.Uuid
  user_id  String         @db.Uuid
  task_id  String         @db.Uuid
  status   WorkHourStatus
  start    DateTime?
  duration Int            @default(0)
  end      DateTime?
  task     Task           @relation("workingHourTask", fields: [task_id], references: [id], onDelete: Cascade)
  user     Users          @relation("workingHourUser", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("workinghour")
}

model ChangeOrder {
  id          String             @id @default(uuid()) @db.Uuid
  project     String             @db.Uuid
  recipients  String             @db.Uuid
  remarks     String             @default("")
  changeOrder Int                @default(1)
  description String             @default("")
  sender      String             @db.Uuid
  sentOn      DateTime           @default(now())
  Project     Project            @relation("ChangeOrderProject", fields: [project], references: [id], onDelete: Cascade)
  Recipients  Users              @relation("ChangeOrderRecipients", fields: [recipients], references: [id], onDelete: Cascade)
  senders     Users              @relation("ChangeOrderSender", fields: [sender], references: [id], onDelete: Cascade)
  CoRefersTo  ChangeOrdertable[] @relation("CoRefersTo")
  coResponse  COResponse?  @relation("coResponse")

  @@map("changeorder")
}

model ChangeOrdertable {
  id           String      @id @default(uuid()) @db.Uuid
  siNo         Int         @default(0)
  description  String      @default("")
  referenceDoc String      @default("")
  elements     String      @default("")
  QtyNo        Int         @default(0)
  hours        Float       @default(0.0)
  cost         Float       @default(0.0)
  files       Json               @default("[]")
  CoId         String      @db.Uuid 
  CoRefersTo   ChangeOrder @relation("CoRefersTo", fields: [CoId], references: [id])

  @@map("changeordertable")
}

model COResponse{
  id        String    @id @default(uuid())  @db.Uuid
  approved  Boolean   @default(true)
  description   String    @default("")
  CoId        String  @db.Uuid  @unique
  COResponse  ChangeOrder @relation("coResponse",fields:[CoId],references:[id])
  userId        String  @db.Uuid
  user      Users     @relation("COrespondedby",fields:[userId],references:[id])
}

model JobStudy {
  id          String  @id @default(uuid()) @db.Uuid
  QtyNo       Int
  unitTime    Float   @default(0.0)
  execTime    Float   @default(0.0)
  projectId   String  @db.Uuid
  description String
  projects    Project @relation("projectJobStudy", fields: [projectId], references: [id], onDelete: Cascade)

  @@map("jobStudy")
}

model WBSActivity {
  id       String     @id @default(uuid()) @db.Uuid
  type     Activity
  name     String
  subTasks SubTasks[] @relation("subTasks")

  @@map("wbsactivity")
}

model SubTasks {
  id            String      @id @default(uuid()) @db.Uuid
  description   String
  unitTime      Float       @default(0.0)
  CheckUnitTime Float       @default(0.0)
  QtyNo         Int         @default(0)
  checkHr       Float       @default(0.0)
  execHr        Float       @default(0.0)
  projectID     String      @db.Uuid
  wbsactivityID String      @db.Uuid
  project       Project     @relation("subTasks", fields: [projectID], references: [id], onDelete: Cascade)
  WBSACTIVITY   WBSActivity @relation("subTasks", fields: [wbsactivityID], references: [id], onDelete: Cascade)

  @@map("subTasks")
}

model Group {
  id        String      @id @default(uuid()) @db.Uuid
  name      String
  adminId   String      @db.Uuid
  createdAt DateTime    @default(now())
  admin     Users       @relation("groupAdmin", fields: [adminId], references: [id])
  members   GroupUser[] @relation("groupOfUsers")
  messages  Message[]   @relation("groupMessages")

  @@map("group")
}

model GroupUser {
  id       String @id @default(uuid()) @db.Uuid
  memberId String @db.Uuid
  groupId  String @db.Uuid
  group    Group  @relation("groupOfUsers", fields: [groupId], references: [id])
  members  Users  @relation("groupMembers", fields: [memberId], references: [id])

  @@map("groupuser")
}

model Message {
  id          String   @id @default(uuid()) @db.Uuid
  content     String
  createdAt   DateTime @default(now())
  senderId    String   @db.Uuid
  receiverId  String?   @db.Uuid
  groupId     String ?  @db.Uuid
  groups      Group?    @relation("groupMessages", fields: [groupId], references: [id])
  receiver    Users?    @relation("messageReceivedBy", fields: [receiverId], references: [id])
  sender      Users?    @relation("messageSentBy", fields: [senderId], references: [id])
  taggedUsers Users[]  @relation("TaggedUsers")

  @@map("message")
}

enum WorkHourStatus {
  START
  END
  PAUSE
  RESUME
}

enum UserRole {
  STAFF
  CLIENT
  VENDOR
}

enum Status {
  ACTIVE
  ONHOLD
  INACTIVE
  DELAY
  COMPLETE
  ASSIGNED
}

enum Stage {
  RFI
  IFA
  BFA
  BFA_M
  RIFA
  RBFA
  IFC
  BFC
  RIFC
  REV
  CO
  COMPLETED
}

enum Tools {
  TEKLA
  SDS2
  PEMB
}

enum Activity {
  MODELING
  DETAILING
  ERECTION
  MODEL_CHECKING
  DETAIL_CHECKING
  ERECTION_CHECKING
  DESIGNER
  DESIGN_CHECKING
}

enum State {
  PARTIAL
  COMPLETE
}
