generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

model Users {
  id            String   @id @default(uuid()) @db.Uuid
  username      String   @unique
  password      String   
  email         String?  @db.VarChar(150)
  f_name        String   @db.VarChar(50)
  m_name        String?  @db.VarChar(50)
  l_name        String?  @db.VarChar(50)
  phone         String   @db.VarChar(20)
  role          UserRole
  is_active     Boolean  @default(true)
  is_staff      Boolean  @default(false)
  is_superuser  Boolean  @default(false)
  is_firstLogin Boolean  @default(true)

  fabricators Fabricator[] // Relation to Fabricator model
  managedDepartments Department[] @relation("Manager") // Departments where the user is a manager
  createdDepartments Department[] @relation("Creator") // Departments created by the user

  @@map("users")
}

model Fabricator {
  id          String   @id @default(uuid()) @db.Uuid
  createdById String   @db.Uuid // Explicitly define as uuid
  createdBy   Users    @relation(fields: [createdById], references: [id], onDelete: Cascade)
  fabName     String   @default("") // Default empty string for fabName
  headquaters Json     @default("{}") // Default empty JSON object for headquaters
  website     String   @default("") // Default empty string for website
  drive       String   @default("") // Default empty string for drive
  branches    Json     @default("[]") // Default to empty array
  files       String[] @default([])  // Default to empty array
  createdAt   DateTime @default(now()) // Timestamp for creation
  updatedAt   DateTime @updatedAt      // Automatically update on modification

  client Client[]

  @@map("fabricators") // Optional: map to a specific database table name
}

model Department {
  id         String   @id @default(uuid()) @db.Uuid
  name       String   @unique
  managerId  String?  @db.Uuid // Foreign key to the Users model (UUID)
  manager    Users?   @relation(fields: [managerId], references: [id], name: "Manager")
  createdById String? @db.Uuid // Foreign key to the Users model (UUID)
  createdBy  Users?   @relation(fields: [createdById], references: [id], name: "Creator")
  isBin      Boolean  @default(false)

  @@map("department") // Optional: Matches the Django table name
}

 model Client {
  id            String      @id @default(uuid()) @db.Uuid
  username      String      @unique
  password      String      
  email         String?     @db.VarChar(150)
  f_name        String      @db.VarChar(50)
  m_name        String?     @db.VarChar(50)
  l_name        String?     @db.VarChar(50)
  phone         String      @db.VarChar(20)
  alt_phone     String?     @db.VarChar(20) // Optional alternate phone
  designation   String      @db.VarChar(50) // Added proper field name
  address       String?     @db.VarChar(150)
  city          String?     @db.VarChar(50)
  state         String?     @db.VarChar(50)
  country       String?     @db.VarChar(50)
  zip_code      String?     @db.VarChar(10)
  role          UserRole
  is_active     Boolean     @default(true)
  is_staff      Boolean     @default(false)
  is_superuser  Boolean     @default(false)
  is_firstLogin Boolean     @default(true)

  fabricator    Fabricator  @relation(fields: [fabricatorId], references: [id])
  fabricatorId  String      @db.Uuid

  @@map("client")
}

enum UserRole {
  STAFF
  CLIENT
  VENDOR
}
